
USE WAREHOUSE IMT577_DW_COLE_THORPEN;
USE DATABASE IMT577_DB_COLE_THORPEN;

-- PASS THROUGH VIEWS OF FACTS AND DIMENSIONS

CREATE OR REPLACE SECURE VIEW VIEW_DIM_CHANNEL AS 
    SELECT 
        DIMCHANNELID
        ,CHANNELID
        ,CHANNELCATEGORYID
        ,CHANNELNAME
        ,CHANNELCATEGORY
    FROM DIM_CHANNEL; 

SELECT * FROM VIEW_DIM_CHANNEL;


CREATE OR REPLACE SECURE VIEW VIEW_DIM_CUSTOMER AS 
    SELECT 
        DIMCUSTOMERID
        ,DIMLOCATIONID
        ,CUSTOMERID
        ,CUSTOMERFULLNAME
        ,CUSTOMERFIRSTNAME
        ,CUSTOMERLASTNAME
        ,CUSTOMERGENDER
    FROM DIM_CUSTOMER; 

SELECT * FROM VIEW_DIM_CUSTOMER;


CREATE OR REPLACE SECURE VIEW VIEW_DIM_DATE AS 
    SELECT 
        DATE_PKEY
        ,DATE
        ,FULL_DATE_DESC
        ,DAY_NUM_IN_WEEK
        ,DAY_NUM_IN_MONTH
        ,DAY_NUM_IN_YEAR
        ,DAY_NAME
        ,DAY_ABBREV
        ,WEEKDAY_IND
        ,US_HOLIDAY_IND
        ,_HOLIDAY_IND 
        ,MONTH_END_IND
        ,WEEK_BEGIN_DATE_NKEY
        ,WEEK_BEGIN_DATE
        ,WEEK_END_DATE_NKEY
        ,WEEK_END_DATE
        ,WEEK_NUM_IN_YEAR
        ,MONTH_NAME
        ,MONTH_ABBREV
        ,MONTH_NUM_IN_YEAR
        ,YEARMONTH
        ,QUARTER
        ,YEARQUARTER
        ,YEAR
        ,FISCAL_WEEK_NUM
        ,FISCAL_MONTH_NUM
        ,FISCAL_YEARMONTH
        ,FISCAL_QUARTER
        ,FISCAL_YEARQUARTER
        ,FISCAL_HALFYEAR
        ,FISCAL_YEAR
        ,SQL_TIMESTAMP
        ,CURRENT_ROW_IND
        ,EFFECTIVE_DATE
        ,EXPIRATION_DATE
    FROM DIM_DATE; 

SELECT * FROM VIEW_DIM_DATE;


CREATE OR REPLACE SECURE VIEW VIEW_DIM_LOCATION AS 
    SELECT 
        DIMLOCATIONID
        ,ADDRESS
        ,CITY
        ,POSTALCODE
        ,STATE_PROVINCE
        ,COUNTRY
    FROM DIM_LOCATION; 

SELECT * FROM VIEW_DIM_LOCATION;


CREATE OR REPLACE SECURE VIEW VIEW_DIM_PRODUCT AS 
    SELECT 
        DIMPRODUCTID
        ,PRODUCTID
        ,PRODUCTTYPEID
        ,PRODUCTCATEGORYID
        ,PRODUCTNAME
        ,PRODUCTTYPE
        ,PRODUCTCATEGORY
        ,PRODUCTRETAILPRICE
        ,PRODUCTWHOLESALEPRICE
        ,PRODUCTCOST
        ,PRODUCTRETAILPROFIT
        ,PRODUCTWHOLESALEUNITPROFIT
        ,PRODUCTPROFITMARGINUNITPERCENT
    FROM DIM_PRODUCT; 

SELECT * FROM VIEW_DIM_PRODUCT;


CREATE OR REPLACE SECURE VIEW VIEW_DIM_RESELLER AS 
    SELECT 
        DIMRESELLERID
        ,DIMLOCATIONID
        ,RESELLERID
        ,RESELLERNAME
        ,CONTACTNAME
        ,PHONENUMBER
        ,EMAIL
    FROM DIM_RESELLER; 

SELECT * FROM VIEW_DIM_RESELLER;


CREATE OR REPLACE SECURE VIEW VIEW_DIM_STORE AS 
    SELECT 
        DIMSTOREID
        ,DIMLOCATIONID
        ,SOURCESTOREID
        ,STORENAME
        ,STORENUMBER
        ,STOREMANAGER
    FROM DIM_STORE; 

SELECT * FROM VIEW_DIM_STORE;


CREATE OR REPLACE SECURE VIEW VIEW_FACT_PRODUCTSALESTARGET AS 
    SELECT 
        DIMPRODUCTID
        ,DIMTARGETDATEID
        ,PRODUCTTARGETSALESQUANTITY
    FROM FACT_PRODUCTSALESTARGET; 

SELECT * FROM VIEW_FACT_PRODUCTSALESTARGET;


CREATE OR REPLACE SECURE VIEW VIEW_FACT_SALESACTUAL AS 
    SELECT 
        DIMPRODUCTID
        ,DIMSTOREID
        ,DIMRESELLERID
        ,DIMCUSTOMERID
        ,DIMCHANNELID
        ,DIMSALEDATEID
        ,DIMLOCATIONID
        ,SOURCESALESHEADERID
        ,SOURCESALESDETAILID
        ,SALEAMOUNT
        ,SALEQUANTITY
        ,SALEUNITPRICE
        ,SALEEXTENDEDCOST
        ,SALETOTALPROFIT
    FROM FACT_SALESACTUAL; 

SELECT * FROM VIEW_FACT_SALESACTUAL;


CREATE OR REPLACE SECURE VIEW VIEW_FACT_SRCSALESTARGET AS 
    SELECT 
        DIMSTOREID
        ,DIMRESELLERID
        ,DIMCHANNELID
        ,DIMTARGETDATEID
        ,SALESTARGETAMOUNT
    FROM FACT_SRCSALESTARGET; 

SELECT * FROM VIEW_FACT_SRCSALESTARGET;

-- NEW VIEWS FOR COMPLEX QUERIES

-- 1. Give an overall assessment of stores number 5 and 8’s sales.
    -- How are they performing compared to target? Will they meet their 2014 target?
    -- Should either store be closed? Why or why not?
    -- What should be done in the next year to maximize store profits?
    
CREATE OR REPLACE SECURE VIEW VIEW_OVERALLSTORESALES AS 
    WITH SALES AS (
        SELECT 
            S.STORENAME
            ,SA.DIMSTOREID
            ,DD.YEAR
            ,SUM(SA.SALEAMOUNT) AS SALEAMOUNT 
            ,SUM(SA.SALETOTALPROFIT) AS SALETOTALPROFIT
        FROM FACT_SALESACTUAL SA 
            INNER JOIN DIM_STORE S ON S.DIMSTOREID = SA.DIMSTOREID
            LEFT JOIN DIM_DATE DD ON DD.DATE_PKEY = SA.DIMSALEDATEID
        WHERE SA.DIMSTOREID IN (4, 6)
        GROUP BY SA.DIMSTOREID, S.STORENAME, DD.YEAR
    ), TARGET AS (
        SELECT 
            SRC.DIMSTOREID
            ,DD.YEAR
            ,SUM(SRC.SALESTARGETAMOUNT) AS SALESTARGETAMOUNT--* 365
        FROM FACT_SRCSALESTARGET SRC
            INNER JOIN DIM_DATE DD ON DD.DATE_PKEY = SRC.DIMTARGETDATEID
        WHERE SRC.DIMSTOREID IN (4, 6)
            AND DD.YEAR IN (2013, 2014)
        GROUP BY SRC.DIMSTOREID, DD.YEAR
        )
        SELECT 
            S.STORENAME
            ,S.YEAR
            ,S.SALEAMOUNT
            ,S.SALETOTALPROFIT
            ,T.SALESTARGETAMOUNT
        FROM SALES S
            INNER JOIN TARGET T ON T.DIMSTOREID = S.DIMSTOREID AND T.YEAR = S.YEAR
        ORDER BY S.YEAR ASC, S.STORENAME ASC;

SELECT * FROM VIEW_OVERALLSTORESALES;



-- 2. Recommend separate 2013 and 2014 bonus amounts for each store if the total bonus pool for 2013 is $500,000 and the total bonus pool for 2014 is $400,000. Base your recommendation on how well the stores are selling Product Types of Men’s Casual and Women’s Casual.

CREATE OR REPLACE SECURE VIEW VIEW_BONUSES AS 
    WITH STORE_SALES AS (
        SELECT 
            DD.YEAR,
            S.STORENAME,
            P.PRODUCTTYPE,
            SUM(SA.SALEAMOUNT) AS SALEAMOUNT,
            SUM(SA.SALEQUANTITY) AS SALEQUANTITY,
            SUM(SA.SALETOTALPROFIT) AS SALETOTALPROFIT,
            CASE 
                WHEN DD.YEAR = 2013 THEN 500000
                WHEN DD.YEAR = 2014 THEN 400000
            END AS YEARLYBONUSPOOL,
            ROUND(
                SUM(SA.SALEAMOUNT) 
                / SUM(SUM(SA.SALEAMOUNT)) OVER (PARTITION BY DD.YEAR, P.PRODUCTTYPE),
                4
            ) AS PCT_SALEAMOUNT_OF_PRODUCTTYPE_YEAR
        FROM FACT_SALESACTUAL SA
            LEFT JOIN DIM_PRODUCT P ON P.DIMPRODUCTID = SA.DIMPRODUCTID
            LEFT JOIN DIM_STORE S ON S.DIMSTOREID = SA.DIMSTOREID
            LEFT JOIN DIM_DATE DD ON DD.DATE_PKEY = SA.DIMSALEDATEID
        WHERE SA.DIMSTOREID IN (4, 6)
            AND PRODUCTTYPEID IN (6, 9)
            AND DD.YEAR IN (2013, 2014)
        GROUP BY S.STORENAME, P.PRODUCTTYPE, DD.YEAR
        )
        SELECT
            YEAR,
            STORENAME,
            PRODUCTTYPE,
            SALEAMOUNT,
            SALEQUANTITY,
            SALETOTALPROFIT,
            YEARLYBONUSPOOL,
            PCT_SALEAMOUNT_OF_PRODUCTTYPE_YEAR,
            ROUND(
                YEARLYBONUSPOOL * PCT_SALEAMOUNT_OF_PRODUCTTYPE_YEAR,
                2
            ) AS RECOMMENDED_BONUS
        FROM STORE_SALES
        ORDER BY STORENAME ASC, YEAR ASC, PRODUCTTYPE ASC;


SELECT * FROM VIEW_BONUSES;

CREATE OR REPLACE SECURE VIEW VIEW_TOTAL_BONUSES AS 
    WITH STORE_SALES AS (
        SELECT 
            DD.YEAR,
            S.STORENAME,
            SUM(SA.SALEAMOUNT) AS TOTAL_SALEAMOUNT,
            CASE 
                WHEN DD.YEAR = 2013 THEN 500000
                WHEN DD.YEAR = 2014 THEN 400000
            END AS YEARLYBONUSPOOL
        FROM FACT_SALESACTUAL SA
            LEFT JOIN DIM_PRODUCT P ON P.DIMPRODUCTID = SA.DIMPRODUCTID
            LEFT JOIN DIM_STORE S ON S.DIMSTOREID = SA.DIMSTOREID
            LEFT JOIN DIM_DATE DD ON DD.DATE_PKEY = SA.DIMSALEDATEID
        WHERE SA.DIMSTOREID IN (4, 6)
            AND PRODUCTTYPEID IN (6, 9)  -- Men’s Casual & Women’s Casual
            AND DD.YEAR IN (2013, 2014)
        GROUP BY S.STORENAME, DD.YEAR
    ),
    TOTAL_SALES_YEAR AS (
        SELECT
            YEAR,
            SUM(TOTAL_SALEAMOUNT) AS TOTAL_YEAR_SALES
        FROM STORE_SALES
        GROUP BY YEAR
    )
    SELECT
        S.YEAR,
        S.STORENAME,
        S.TOTAL_SALEAMOUNT,
        S.YEARLYBONUSPOOL,
        ROUND(S.TOTAL_SALEAMOUNT / T.TOTAL_YEAR_SALES, 4) AS PCT_SALE_OF_YEAR,
        ROUND(S.YEARLYBONUSPOOL * (S.TOTAL_SALEAMOUNT / T.TOTAL_YEAR_SALES), 2) AS RECOMMENDED_BONUS
    FROM STORE_SALES S
    JOIN TOTAL_SALES_YEAR T ON T.YEAR = S.YEAR
    ORDER BY YEAR, STORENAME;

SELECT * FROM VIEW_TOTAL_BONUSES;


SELECT 
    B.YEAR
    ,B.STORENAME
    ,B.PRODUCTTYPE
    ,B.SALEAMOUNT 
    ,B.SALEQUANTITY
    ,B.SALETOTALPROFIT
    ,B.YEARLYBONUSPOOL
    ,B.PCT_SALEAMOUNT_OF_PRODUCTTYPE_YEAR
    ,TB.PCT_SALE_OF_YEAR AS STORE_SALE_PCT_OF_YEAR
    ,TB.RECOMMENDED_BONUS
FROM VIEW_BONUSES B 
    LEFT JOIN VIEW_TOTAL_BONUSES TB ON TB.STORENAME = B.STORENAME AND TB.YEAR = B.YEAR 


-- 3. Assess product sales by day of the week at stores 5 and 8. What can we learn about sales trends?

CREATE OR REPLACE SECURE VIEW VIEW_PRODUCTBYDAY AS 
    SELECT 
        DD.DAY_NAME
        ,DD.YEAR
        ,S.STORENAME
        ,P.PRODUCTCATEGORY
        ,P.PRODUCTTYPE
        ,P.PRODUCTNAME
        ,SUM(SA.SALEAMOUNT) AS SALEAMOUNT
        ,SUM(SA.SALEQUANTITY) AS SALEQUANTITY
        ,SUM(SA.SALETOTALPROFIT) AS SALETOTALPROFIT
    FROM FACT_SALESACTUAL SA
        LEFT JOIN DIM_STORE S ON S.DIMSTOREID = SA.DIMSTOREID
        LEFT JOIN DIM_PRODUCT P ON P.DIMPRODUCTID = SA.DIMPRODUCTID
        LEFT JOIN DIM_DATE DD ON DD.DATE_PKEY = SA.DIMSALEDATEID
    WHERE SA.DIMSTOREID IN (4, 6)
    GROUP BY DD.DAY_NAME, P.PRODUCTNAME, P.PRODUCTTYPE, P.PRODUCTCATEGORY ,S.STORENAME, DD.YEAR
    ORDER BY DD.YEAR, S.STORENAME ASC, DD.DAY_NAME ASC, P.PRODUCTNAME ASC; 

SELECT * FROM VIEW_PRODUCTBYDAY;


-- 4. Compare the performance of all stores located in states that have more than one store to all stores that are the only store in the state. What can we learn about having more than one store in a state?

CREATE OR REPLACE SECURE VIEW VIEW_STORELOCATIONPERFORMANCE AS 
    WITH STORECOUNTS AS (
        SELECT 
            L.STATE_PROVINCE,
            COUNT(*) AS STORECOUNT
        FROM DIM_STORE S
            LEFT JOIN DIM_LOCATION L ON L.DIMLOCATIONID = S.DIMLOCATIONID
        WHERE S.DIMSTOREID <> -1
        GROUP BY L.STATE_PROVINCE
    )
    SELECT 
        DD.YEAR,
        L.STATE_PROVINCE,
        S.STORENAME,
        CASE 
            WHEN SC.STORECOUNT > 1 THEN 'Multi-Store State'
            ELSE 'Single-Store State'
        END AS CATEGORY,
        SUM(SA.SALEQUANTITY) AS TOTALQUANTITY,
        SUM(SA.SALEAMOUNT) AS TOTALSALES,
        SUM(SA.SALETOTALPROFIT) AS TOTALPROFIT,
        AVG(SA.SALEAMOUNT) AS AVG_SALESPERTRANSACTION,
        AVG(SA.SALETOTALPROFIT) AS AVG_PROFITPERTRANSACTION
    FROM DIM_STORE S
        LEFT JOIN DIM_LOCATION L ON L.DIMLOCATIONID = S.DIMLOCATIONID
        LEFT JOIN FACT_SALESACTUAL SA ON SA.DIMSTOREID = S.DIMSTOREID
        INNER JOIN STORECOUNTS SC ON SC.STATE_PROVINCE = L.STATE_PROVINCE
        LEFT JOIN DIM_DATE DD ON DD.DATE_PKEY = SA.DIMSALEDATEID
    WHERE S.DIMSTOREID <> -1
    GROUP BY 
        DD.YEAR,
        L.STATE_PROVINCE,
        S.STORENAME,
        CASE 
            WHEN SC.STORECOUNT > 1 THEN 'Multi-Store State'
            ELSE 'Single-Store State'
        END
    ORDER BY CATEGORY DESC, L.STATE_PROVINCE, S.STORENAME;

SELECT * FROM VIEW_STORELOCATIONPERFORMANCE;
